#!/usr/bin/env python3

######################################################
######      BULK RNASEQ SNAKEMAKE PIPELINE      ######
######################################################
##
##	BF528 Project 1- An RNA-Seq pipeline for
##	differential expression on Mouse cardiac tissue
##


################################
####	DEFINE VARIABLES    ####
################################
##
## Useful variables for writing rules
##

## NAMES:		A list of file names
NAMES = expand('{timepoints}{rep}_{read}',
				timepoints = ['AD', 'P0', 'P4', 'P7'],
				rep = ['rep1', 'rep2'],
				read = ['R1', 'R2'])

## SAMPLES:		A list of sample names (without the R1/R2 suffix)
SAMPLES = expand('{timepoints}{rep}',
			timepoints = ['AD', 'P0', 'P4', 'P7'],
			rep = ['rep1', 'rep2'])


## fa_fn:   		The genome fasta (to be created in rule `get_genome`
fa_fn 	    		= 'results/ncbi_dataset/data/GCF_000001635.27/GCF_000001635.27_GRCm39_genomic.fna'

## gff_fn:	    	The annotation file for the mouse genome (gtf)
gtf_fn 			= 'results/ncbi_dataset/data/GCF_000001635.27/genomic.gtf'

## GRCm39_index:	The index folder created by rule `star_index`
GRCm39_index 		= 'results/m39_STAR/'



##############################
####	PIPELINE RULES    ####
##############################
##
## Collection of pipeline rules
##


##
##  RULE ALL
##
rule all:
	input:
            # Quality control
            'results/multiqc_report.html',				    # MultiQC report 
            
            # Read alignment and mapping
            fa_fn,                                                          # Mouse Genome Fasta m39
            gtf_fn,                                                         # Annotation File (GTF)
            expand('results/align_flagstat/{sample}_align.stats',           # STAR Alignment flagstat 
                    sample=SAMPLES),

            # Counts generation
            'results/verse_counts/filtered_matrix.csv',                     # Filtered counts matrix
            'results/map_file.csv'                                          # Mapping file of gene ID/gene symbol




##  -----------
##  RULE FASTQC
##  -----------   
##      Runs FastQC on all input files
##      
##      Input:  All sample fastq.gz files
##
##      Output:
##              - A zip file containing fastqc outputs
##              - An HTML report for the sample fastq.gz file

rule fastqc:
    threads: 4
    conda: 'envs/fastqc_env.yml'

    input:
    	'samples/{file}.fastq.gz',

    output:
    	'results/fastqc/{file}_fastqc.zip',
    	'results/fastqc/{file}_fastqc.html'
		
    params:
    	outdir = 'results/fastqc/'
    
    shell:
    	'''
    	fastqc -o {params.outdir} {input} -t {threads}
    	'''

##  ------------
##  RULE MULTIQC
##  ------------
##      Runs MultiQC on all reports generated by FastQC
##      Concatenates all fastqc reports into one
##
##      Input:      All zip files generated from running FastQC on all files
##  
##      Output:     A single concatenated report `multiqc_report.html`

rule multiqc:
    conda: 'envs/multiqc_env.yml'

    input:
    	expand('results/fastqc/{names}_fastqc.zip', names=NAMES)

    output:
    	'results/multiqc_report.html'

    params:
        outdir = 'results/'

    shell:
        '''
        multiqc {input} -o {params.outdir} -f
        '''

## ---------------
## RULE GET_GENOME
## ---------------
##      Download relevant data files with ncbi_datasets.
##      Includes the genome, gtf, and seq-report
##
##      Output:
##          - The fasta file containing the m39 mouse genome
##          - The GTF file for the mouse genome

rule get_genome:
    conda: 'envs/datasets_env.yml'
    
    output:
        fa_fn,
        gtf_fn

    shell:
    	'''
	cd results/
	datasets download genome accession GCF_000001635.27 --include gtf,genome,seq-report
	unzip ncbi_dataset.zip
	rm ncbi_dataset.zip
	cd ../
	'''


## ---------------
## RULE STAR INDEX
## ---------------
##      Generate an index for the mouse genome using STAR
##
##      Input:
##          - m39 Mouse Genome File
##          - m39 Mouse Genome Annotation File (GTF)
##
##      Output:
##          - `results/m39_star/` A directory containing Star's Index

rule star_index:
    threads: 16
    conda: 'envs/star_env.yml'

    input:
        fa          = fa_fn,
        gtf	    = gtf_fn

    output:
        ref_index   = directory(GRCm39_index)

    shell:
        '''
        STAR --runMode genomeGenerate \
            --genomeDir {output.ref_index} \
            --genomeFastaFiles {input.fa} \
            --sjdbGTFfile {input.gtf} \
            --sjdbOverhang 99 \
            --genomeSAindexNbases 11 \
            --runThreadN {threads}
        '''


## ---------------
## RULE STAR ALIGN
## ---------------
##      Align raw reads to the genome using STAR and the 
##      index generated in previous rule
##
##      Input:
##          - R1/R2:    The paired end reads of each sample
##          - m39 Mouse Genome index created by RULE STAR INDEX
##
##      Output:
##          - Unsorted BAM file 

rule star_align:
    threads: 8
    conda: 'envs/star_env.yml'

    input:
        R1              = 'samples/{sample}R1.fastq.gz',
        R2              = 'samples/{sample}R2.fastq.gz',
        ref_index       = GRCm39_index

    output:
        bam             = 'results/aligned/{sample}Aligned.out.bam'

    params:
        outdir          = 'results/aligned'

    shell:
        '''
        STAR --runThreadN {threads} \
            --genomeDir {input.ref_index} \
            --readFilesIn {input.R1} {input.R2} \
            --readFilesCommand zcat  \
            --outSAMtype BAM Unsorted \
            --outFileNamePrefix {params.outdir}/{wildcards.sample}
        '''


## ----------------------
## RULE SAMTOOLS FLAGSTAT
## ----------------------
##      Use samtools to generate summary statistics
##      about the alignment for each sample
##
##      Input:
##          - Alignment BAM produced from STAR
##
##      Output:
##          - Flagstat file for each sample

rule samtools_flagstat:
    conda: 'envs/samtools_env.yml'

    input:
    	bam         = 'results/aligned/{sample}_Aligned.out.bam'

    output:
    	flagstat    = 'results/align_flagstat/{sample}_align.stats'
    
    shell:
        '''
        samtools flagstats {input} > {output}
	'''


## ----------
## RULE VERSE
## ----------
##      Use verse to quantify mRNA amounts for each
##      gene in each sample
##
##      Input:
##          - Alignment BAM produced from STAR
##
##      Output:
##          - summary:          summary file of counts
##          - sample_counts:    counts file two columns, gene ID and count

rule verse:
    conda:  'envs/verse_env.yml'

    input:
        bam = 'results/aligned/{sample}_Aligned.out.bam'

    output:
        summary         = 'results/verse_counts/{sample}.exon.summary.txt',
        sample_counts   = 'results/verse_counts/{sample}.exon.txt'

    params:
        annot               = 'results/ncbi_dataset/data/GCF_000001635.27/genomic.gtf',
        feat_type           = 'exon',
        gene_identifier     = 'gene_id',
        outdir              = 'results/verse_counts'

    shell:
        '''
        verse -a {params.annot} -t {params.feat_type} -g {params.gene_identifier} -o {params.outdir}/{wildcards.sample} -T 4 {input.bam}
        '''


## --------------
## RULE CONCAT DF
## --------------
##      Use custom python script concat_df.py to combine
##      all verse output counts files into one large matrix
##
##      Input:
##          - all_counts:       list of all verse files produced
##
##      Output:
##          - counts_csv:       a counts matrix as csv

rule concat_df:
    input:
        all_counts      = expand('results/verse_counts/{sample}.exon.txt',
                                sample = SAMPLES)
    
    output:
        counts_csv      = 'results/verse_counts/counts_matrix.csv'

    params:
        concat_script   = 'scripts/concat_df.py'

    shell:
        '''
        python {params.concat_script} -i {input.all_counts} -o {output.counts_csv}
        '''


## -----------------
## RULE GENE MAPPING
## -----------------
##      Use custom python script parse_gtf to extract
##      information needed for gene mapping
##      NOTE THIS STEP IS NO LONGER NEEDED AS VERSE CAN DIRECTLY
##      EXTRACT GENE NAMES
##
##      Input: 
##          - gtf:          mouse genome m39 annotation file
##
##      Output:
##          - map_file:     csv containing two columns, one of gene ID's
##                          and one of gene names

rule gene_mapping:
    input:
        gtf             = 'results/ncbi_dataset/data/GCF_000001635.27/genomic.gtf',

    output:
        map_file        = 'results/map_file.csv'

    params:
        map_script      = 'scripts/parse_gtf.py'

    shell:
        '''
        python {params.map_script} -i {input.gtf} -o {output.map_file}
        '''


## ------------------
## RULE FILTER COUNTS
## ------------------
##      Use custom python script filter_cts_mat.py to 
##      filter the counts matrix and remove genes with no counts
##
##      Input: 
##          - raw_counts:           raw counts matrix from rule concat_df
##
##      Output:
##          - filtered_counts:      filtered counts matrix

rule filter_counts:
    input:
        raw_counts          = 'results/verse_counts/counts_matrix.csv'

    output:
        filtered_counts     = 'results/verse_counts/filtered_matrix.csv'

    params:
        filter_script 	    = 'scripts/filter_cts_mat.py'
    
    shell:
        '''
        python {params.filter_script} -i {input.raw_counts} -o {output.filtered_counts}
        '''
